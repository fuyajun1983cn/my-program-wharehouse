#+TITLE: 计算机程序构造与解释学习笔记

* 在线书箱
  https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html

* 知识点

** Building Abstractions with Procedures
   Every powerful language has three mechanisms for accomplishing
   this:
   - *primitive expressions*, which represent the simplest entities
     the language is concerned with, 
   - *means of combination*, by which compound elements are built from
     simpler ones, and 
   - *means of abstraction*, by which compound elements can be named
     and manipulated as units.

     
   the general notion of the environment as providing a context in
   which evaluation takes place will play an important role in our
   understanding of program execution.

   Each special form has its own evaluation rule. The various kinds of
   expressions (each with its associated evaluation rule) constitute
   the syntax of the programming language.  

   some of the elements that must appear in any powerful programming
   language:
   - Numbers and arithmetic operations are primitive data and
     procedures.
   - Nesting of combinations provides a means of combining
     operations.
   - Definitions that associate names with values provide a limited
     means of abstraction. 

     
   条件表达式谓词逻辑：
   #+BEGIN_SRC lisp
     ;;定义取绝对值函数
     (defun myabs(x) (cond ((> x 0) x)
                           ((= x 0) 0)
                           ((< x 0) (- x))))

     (defun myabs(x) (cond ((< x 0) (- x))
                           (else x)))

     (defun myabs(x) (if (< x 0)
                         (- x)
                         x))
   #+END_SRC

   *换零钱*

   给定一定数量的钱,及不同面额的钱币，计算出所有可能的换零钱的方法。

   使用递归的方法如下：

   总的换零钱的方法数量等于如下两种情况下的总数：
   1. the number of ways to change amount a using all but the first
      kind of coin, plus
   2. the number of ways to change amount a - d using all n kinds of
      coins, where d is the denomination（面额） of the first kind of coin. 
   
      
   递归代码如下所示：
   #+BEGIN_SRC common-lisp
     ;;
     ;;这里假设换零钱的面额有5种，
     ;;从大到小排列为：
     ;; 50 25 10 5 1
     (defun count-change(amount)
       (cc amount 5))

     (defun cc(amount kinds-of-coins)
       (cond ((= amount 0) 1)
             ((or (< amount 0) (= kinds-of-coins 0)) 0)
             (else (+ (cc amount
                          (- kinds-of-coins 1))
                      (cc (- amount
                             (first-denomination kinds-of-coins))
                          kinds-of-coins)))))

     ;;最大的面额值
     (defun first-denomination (kinds-of-coins)
       (cond ((= kinds-of-coins 1) 1)
             ((= kinds-of-coins 2) 5)
             ((= kinds-of-coins 3) 10)
             ((= kinds-of-coins 4) 25)
             ((= kinds-of-coins 5) 50)))

   #+END_SRC

   1. Define a procedure that takes three numbers as arguments and
      returns the sum of the squares of the two larger numbers.
      
      #+BEGIN_SRC common-lisp
        (defun sum-of-squre(a b c)
          "三个数中较大的两个数的和"
          (cond ((and (< a b) (< a c)) (+ b c))
                (and (< b a) (< b c)) (+ a c)
                (and (< c a) (< c b)) (+ b c)))
      #+END_SRC

   2. A function f is defined by the rule that f(n) = n if n<3 and
      f(n) = f(n - 1) + 2f(n - 2) + 3f(n - 3) if n> 3. Write a
      procedure that computes f by means of a recursive process. Write
      a procedure that computes f by means of an iterative process. 

      #+BEGIN_SRC common-lisp
        (defun f(n)
          (cond ((= n 0) 0)
                ((= n 1) 1)
                ((= n 2) 2)
                (else (f-iter 4 2 1 0 3 n))))
     
        ;;迭代算法（尾递归）
        (defun f-iter(result n2 n1 n0 counter max-count)
          (if (= counter max-count)
              result
              (f-iter (+ n2 (* 2 n1) (* 3 n0))
                      n2
                      n1
                      (+ counter 1)
                      max-count)))
     
        (defun f-iter (result n2 n1 n0 count)
          (if (= count 3)
              result
              (f-iter (+ n2 (* 2 n1) (* 3 n0))
                      n2
                      n1
                      (- count 1))))
      #+END_SRC

   3. 使用递归的方法实现杨辉三角。
      #+BEGIN_SRC common-lisp

        ;;
        ;; 对于每行的非首首尾两个元素，执行如下计算：
        ;; i行j列的元素等于 i-1行,j-1列的元素 加上 i行，j列的元素。
        ;; todo: 熟悉common list循环控制

        (defun pascal-triangle-row(n)
          (cond ((= 1 n) (list 1))
                ((= 2 n) (list 1 1))
                (else (list 1 (pascal-triangle-row n-1) 1)))
          )

        (defun pascal-triangle(n)
          (for 1 n)
            
          )
      #+END_SRC

   4. 


** Building Abstractions with Data
   he general technique of isolating the parts of a program that deal
   with how data objects are represented from the parts of a program
   that deal with how data objects are used is a powerful design
   methodology called *data abstraction*. 

   
   
** Modularity, Objects, and State

** Metalinguistic Abstraction

** Computing with Register Machines
