#+TITLE: 计算机程序构造与解释学习笔记

* 在线书箱
  https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html

* 知识点

** Building Abstractions with Procedures
   Every powerful language has three mechanisms for accomplishing
   this:
   - *primitive expressions*, which represent the simplest entities
     the language is concerned with, 
   - *means of combination*, by which compound elements are built from
     simpler ones, and 
   - *means of abstraction*, by which compound elements can be named
     and manipulated as units.

     
   the general notion of the environment as providing a context in
   which evaluation takes place will play an important role in our
   understanding of program execution.

   Each special form has its own evaluation rule. The various kinds of
   expressions (each with its associated evaluation rule) constitute
   the syntax of the programming language.  

   some of the elements that must appear in any powerful programming
   language:
   - Numbers and arithmetic operations are primitive data and
     procedures.
   - Nesting of combinations provides a means of combining
     operations.
   - Definitions that associate names with values provide a limited
     means of abstraction. 

     
   条件表达式谓词逻辑：
   #+BEGIN_SRC lisp
     ;;定义取绝对值函数
     (defun myabs(x) (cond ((> x 0) x)
                           ((= x 0) 0)
                           ((< x 0) (- x))))

     (defun myabs(x) (cond ((< x 0) (- x))
                           (else x)))

     (defun myabs(x) (if (< x 0)
                         (- x)
                         x))
   #+END_SRC

   1. Define a procedure that takes three numbers as arguments and
      returns the sum of the squares of the two larger numbers.
      
      #+BEGIN_SRC common-lisp
        (defun sum-of-squre(a b c)
          "三个数中较大的两个数的和"
          (cond ((and (< a b) (< a c)) (+ b c))
                (and (< b a) (< b c)) (+ a c)
                (and (< c a) (< c b)) (+ b c)))
      #+END_SRC

** Building Abstractions with Data

** Modularity, Objects, and State

** Metalinguistic Abstraction

** Computing with Register Machines
