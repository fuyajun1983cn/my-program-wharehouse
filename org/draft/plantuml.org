#+STARTUP: overview
#+TITLE: PlantUML语法速查
#+STARTUP: hidestars
#+OPTIONS:    H:3  toc:t \n:nil ::t |:t ^:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+HTML_HEAD: <link rel="stylesheet" title="Standard" href="css/worg.css" type="text/css" />



* Sequence Diagram

** Basic examples
   
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016062901.png :cmdline -charset UTF-8
     @startuml
     Alice -> Bob: Authentication Request
     Bob --> Alice: Authentication Response
     Alice -> Bob: Another authentication Request
     Alice <-- Bob: another authentication Response
     @enduml   
   #+END_SRC

   #+RESULTS:
   [[file:./images/2016/2016062901.png]]

** Comments
   注释用单引号或多行注释 /' ... '/

** Declaring participant
   可以使用 *participant* 关键字来改变参与者的顺序
   也可以使用其他的关键字声明一个参与者：
   - actor
   - boundary
   - control
   - entity
   - database

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016062902.png :cmdline -charset UTF-8
     @startuml
     actor Foo1
     boundary Foo2
     control Foo3
     entity Foo4
     database Foo5
     Foo1 -> Foo2 : To boundary
     Foo1 -> Foo3 : To control
     Foo1 -> Foo4 : To entity
     Foo1 -> Foo5 : To database
     @enduml   
   #+END_SRC

   #+RESULTS:
   [[file:./images/2016/2016062902.png]]

   可以使用 *as* 关键字来重命名一个参与者
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016062903.png :cmdline -charset UTF-8
     @startuml
     actor Bob #red
     ' The only difference between actor
     'and participant is the drawing
     participant Alice
     participant "I have a really\nlong name" as L #99FF99
     /' You can also declare:
     participant L as "I have a really\nlong name" #99FF99
     '/
     Alice ->Bob: Authentication Request
     Bob ->Alice: Authentication Response
     Bob ->L: Log transaction
     @enduml   
   #+END_SRC

   #+RESULTS:
   [[file:./images/2016/2016062903.png]]

** Use non-letters in participants
   可以直接使用引号来定义参与者，并使用 *as* 关键字来起个别名。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016062904.png :cmdline -charset UTF-8
     @startuml
     Alice -> "Bob()" : Hello
     "Bob()" -> "This is very\nlong" as Long
     ' You can also declare:
     ' "Bob()" -> Long as "This is very\nlong"
     Long --> "Bob()" : ok
     @enduml   
   #+END_SRC

   #+RESULTS:
   [[file:./images/2016/2016062904.png]]

** Message to Self
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016062905.png :cmdline -charset UTF-8
     @startuml
     Alice ->Alice: This is a signal to self.\nIt also demonstrates\nmultiline \ntext
     @enduml   
   #+END_SRC

   #+RESULTS:
   [[file:./images/2016/2016062905.png]]

** Change arrow style
   可以改变箭头的形状：
   1. add a final x to denote a lost message
   2. use \ or / instead of < or > to have only the bottom or top part of the arrow
   3. repeat the arrow head (for example, >> or //) head to have a thin drawing
   4. use -- instead of - to have a dotted arrow
   5. add a final ”o” at arrow head
   6. use bidirectional arrow

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016062906.png :cmdline -charset UTF-8
     @startuml
     Bob ->x Alice
     Bob -> Alice
     Bob ->> Alice
     Bob -\ Alice
     Bob \\- Alice
     Bob //-- Alice
     Bob ->o Alice
     Bob o\\-- Alice
     Bob <-> Alice
     Bob <->o Alice
     @enduml   
   #+END_SRC

   #+RESULTS:
   [[file:./images/2016/2016062906.png]]

** Change arrow color
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016062907.png :cmdline -charset UTF-8
     @startuml
     Bob -[#red]> Alice : hello
     Alice -[#0000FF]->Bob : ok
     @enduml   
   #+END_SRC

** Message sequence numbering
   使用关键字 *autonumber* 来自动给消息添加数字序号
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016062908.png :cmdline -charset UTF-8
     @startuml
     autonumber
     Bob -> Alice : Authentication Request
     Bob <- Alice : Authentication Response
     @enduml   
   #+END_SRC

   可以使用 :autonumber 'start' 'increment'  指定一个起始数字和增量。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016062909.png :cmdline -charset UTF-8
     @startuml
     autonumber
     Bob -> Alice : Authentication Request
     Bob <- Alice : Authentication Response
     autonumber 15
     Bob -> Alice : Another authentication Request
     Bob <- Alice : Another authentication Response
     autonumber 40 10
     Bob -> Alice : Yet another authentication Request
     Bob <- Alice : Yet another authentication Response
     @enduml
   #+END_SRC

   双引号之间也可以指定数字显示的格式， 可以参考Java类 *DecimalFormat*
   中对格式的要求。 (’0’ means digit, ’#’ means digit and zero if
   absent)
   在格式中，可以使用html标签。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016062910.png :cmdline -charset UTF-8
     @startuml
     autonumber "<b>[000]"
     Bob -> Alice : Authentication Request
     Bob <- Alice : Authentication Response
     autonumber 15 "<b>(<u>##</u>)"
     Bob -> Alice : Another authentication Request
     Bob <- Alice : Another authentication Response
     autonumber 40 10 "<font color=red ><b>Message 0 "
     Bob -> Alice : Yet another authentication Request
     Bob <- Alice : Yet another authentication Response
     @enduml
   #+END_SRC

   也可以使用 autonumber stop 'increment' 'format' 以及 autonumber
   resume 'increment' 'format'来暂停和恢复数字编号。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016062911.png :cmdline -charset UTF-8
     @startuml
     autonumber 10 10 "<b>[000]"
     Bob -> Alice : Authentication Request
     Bob <- Alice : Authentication Response
     autonumber stop
     Bob -> Alice : dummy
     autonumber resume "<font color=red ><b>Message 0 "
     Bob -> Alice : Yet another authentication Request
     Bob <- Alice : Yet another authentication Response
     autonumber stop
     Bob -> Alice : dummy
     autonumber resume 1 "<font color=blue ><b>Message 0 "
     Bob -> Alice : Yet another authentication Request
     Bob <- Alice : Yet another authentication Response
     @enduml
   #+END_SRC

** Title
   为序列图定义一个标题
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016062912.png :cmdline -charset UTF-8
     @startuml
     title Simple communication example
     Alice -> Bob: Authentication Request
     Bob --> Alice: Authentication Response
     @enduml   
   #+END_SRC

** Legend(图例) the diagram
   The legend and end legend are keywords is used to put a legend. You
   can optionally specify to have left, right or center alignment for
   the legend.

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016062913.png :cmdline -charset UTF-8
     @startuml
     Alice -> Bob : Hello
     legend right
     Short
     legend
     endlegend
     @enduml   
   #+END_SRC

** Splitting diagrams
   *newpage* 关键字用于将一个图分解成多个图， 在 *newpage* 之后可以添
   加一个标题。 
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070102.png :cmdline -charset UTF-8
     @startuml
     Alice -> Bob : message 1
     Alice -> Bob : message 2
     newpage
     Alice -> Bob : message 3
     Alice -> Bob : message 4
     newpage A title for the\nlast page
     Alice -> Bob : message 5
     Alice -> Bob : message 6
     @enduml   
   #+END_SRC

** Grouping message
   可以使用如下一些关键字组合消息：
   - alt/else
   - opt
   - loop
   - par
   - break
   - critical
   - group 后面跟着要显示的文字 
     end 关键字关闭一个group，group是可以嵌套的。

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070103.png :cmdline -charset UTF-8
     @startuml
     Alice -> Bob: Authentication Request
     alt successful case
     Bob -> Alice: Authentication Accepted
     else some kind of failure
     Bob -> Alice: Authentication Failure
     group My own label
     Alice -> Log : Log attack start
     loop 1000 times
     Alice -> Bob: DNS Attack
     end
     Alice -> Log : Log attack end
     end
     else Another type of failure
     Bob -> Alice: Please repeat
     end
     @enduml   
   #+END_SRC

** Notes on messages
   消息也可以添加注解，可以是显示在左边，可以显示在右边，也可以多行显
   示。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070104.png :cmdline -charset UTF-8
     @startuml
     Alice ->Bob : hello
     note left: this is a first note
     Bob ->Alice : ok
     note right: this is another note
     Bob ->Bob : I am thinking
     note left
     a note
     can also be defined
     on several lines
     end note
     @enduml           
   #+END_SRC

** Some other notes
   注解也可以以某个注解的位置为参考进行显示，也可以修改背景色。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070105.png :cmdline -charset UTF-8
     @startuml
     participant Alice
     participant Bob
     note left of Alice #aqua
     This is displayed
     left of Alice.
     end note
     note right of Alice: This is displayed right of Alice.
     note over Alice: This is displayed over Alice.
     note over Alice , Bob #FFAAAA: This is displayed\n over Bob and Alice.
     note over Bob , Alice
     This is yet another
     example of
     a long note.
     end note
     @enduml   
   #+END_SRC

** Changing notes shape
   可以使用 *hnote* 和 *rnote* 关键字改变注解的形状。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070106.png :cmdline -charset UTF-8
     @startuml
     caller -> server : conReq
     hnote over caller : idle
     caller <- server : conConf
     rnote over server
     "r" as rectangle
     "h" as hexagon
     endrnote
     @enduml   
   #+END_SRC

** Creole and HTML
   可以使用creale格式定义注解
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070107.png :cmdline -charset UTF-8
     @startuml
     participant Alice
     participant "The **Famous** Bob" as Bob
     Alice -> Bob : hello --there --
     ... Some ~~long delay~~ ...
     Bob -> Alice : ok
     note left
     This is **bold**
     This is //italics//
     This is ""monospaced""
     This is --stroked --
     This is __underlined__
     This is ~~waved~~
     end note
     Alice -> Bob : A //well formatted// message
     note right of Alice
     This is <back:cadetblue ><size:18>displayed </size ></back >
     __left of__ Alice.
     end note
     note left of Bob
     <u:red >This </u> is <color #118888> displayed </color >
     ,**<color purple >left of </color > <s:red >Alice </strike > Bob**.
     end note
     note over Alice , Bob
     <w:#FF33FF >This is hosted </w> by <img sourceforge.jpg >
     end note
     @enduml   
   #+END_SRC

** Divider
   使用 == 将图拆分为一些逻辑步骤。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070108.png :cmdline -charset UTF-8
     @startuml
     == Initialization ==
     Alice -> Bob: Authentication Request
     Bob --> Alice: Authentication Response
     == Repetition ==
     Alice -> Bob: Another authentication Request
     Alice <-- Bob: another authentication Response
     @enduml   
   #+END_SRC

** Reference
   可以使用 *ref over* 在图中使用引用。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070109.png :cmdline -charset UTF-8
     @startuml
     participant Alice
     actor Bob
     ref over Alice , Bob : init
     Alice -> Bob : hello
     ref over Bob
     This can be on
     several lines
     end ref
     @enduml   
   #+END_SRC

** Delay
   可以使用 *...* 表示一个延迟。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070110.png :cmdline -charset UTF-8
     @startuml
     Alice -> Bob: Authentication Request
     ...
     Bob --> Alice: Authentication Response
     ...5 minutes latter...
     Bob --> Alice: Bye !
     @enduml   
   #+END_SRC

** Space
   使用 *|||* 来表示图中的一些空格。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070111.png :cmdline -charset UTF-8
     @startuml
     Alice -> Bob: message 1
     Bob --> Alice: ok
     |||
     Alice -> Bob: message 2
     Bob --> Alice: ok
     ||45||
     Alice -> Bob: message 3
     Bob --> Alice: ok
     @enduml   
   #+END_SRC

** Lifeline Activation and Destruction
   生命周期图, *active* 和 *deactive* 表示参与者的生命周期， *destroy*
   表示一个参考者生命周期的结束。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070112.png :cmdline -charset UTF-8
     @startuml
     participant User
     User -> A: DoWork
     activate A
     A -> B: << createRequest >>
     activate B
     B -> C: DoWork
     activate C
     C --> B: WorkDone
     destroy C
     B --> A: RequestCreated
     deactivate B
     A -> User: Done
     deactivate A
     @enduml   
   #+END_SRC

   生命周期图也可以嵌套。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070113.png :cmdline -charset UTF-8
     @startuml
     participant User
     User -> A: DoWork
     activate A #FFBBBB
     A -> A: Internal call
     activate A #DarkSalmon
     A -> B: << createRequest >>
     activate B
     B --> A: RequestCreated
     deactivate B
     deactivate A
     A -> User: Done
     deactivate A
     @enduml   
   #+END_SRC

** Participant creation
   *create* 关键字表示在接收到某个消息后，会创建一个新对象。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070114.png :cmdline -charset UTF-8
     @startuml
     Bob -> Alice : hello
     create Other
     Alice -> Other : new
     create control String
     Alice -> String
     note right : You can also put notes!
     Alice --> Bob : ok
     @enduml
   #+END_SRC

** Incoming and outgoing messages
   当只表强调图的某个部分时，可以使用 "["和"]"分别表示图的左边和右边。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070115.png :cmdline -charset UTF-8
     @startuml
     [-> A: DoWork
     activate A
     A -> A: Internal call
     activate A
     A ->] : << createRequest >>
     A<--] : RequestCreated
     deactivate A
     [<- A: Done
     deactivate A
     @enduml   
   #+END_SRC

   还可以使用如下语法：
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070116.png :cmdline -charset UTF-8
     @startuml
     [-> Bob
     [o-> Bob
     [o->o Bob
     [x-> Bob
     [<- Bob
     [x<- Bob
     Bob ->]
     Bob ->o]
     Bob o->o]
     Bob ->x]
     Bob <-]
     Bob x<-]
     @enduml
   #+END_SRC

** Stereotypes and Spots
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070117.png :cmdline -charset UTF-8
     @startuml
     participant "Famous Bob" as Bob << Generated >>
     participant Alice << (C,#ADD1B2) Testable >>
     Bob ->Alice: First message
     @enduml   
   #+END_SRC
    
   使用 skinparam guillemet 改变原型显示的字体。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070118.png :cmdline -charset UTF-8
     @startuml
     skinparam guillemet false
     participant "Famous Bob" as Bob << Generated >>
     participant Alice << (C,#ADD1B2) Testable >>
     Bob ->Alice: First message
     @enduml   
   #+END_SRC

   使用(X,color)add a spotted character in a colored circle
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070119.png :cmdline -charset UTF-8
     @startuml
     participant Bob << (C,#ADD1B2) >>
     participant Alice << (C,#ADD1B2) >>
     Bob ->Alice: First message
     @enduml   
   #+END_SRC

** More information on titles
   标题格式化
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070120.png :cmdline -charset UTF-8
     @startuml
     title __Simple__ **communication** example
     Alice -> Bob: Authentication Request
     Bob -> Alice: Authentication Response
     @enduml   
   #+END_SRC

   标题中也可以包含换行符
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070121.png :cmdline -charset UTF-8
     @startuml
     title __Simple__ communication example\non several lines
     Alice -> Bob: Authentication Request
     Bob -> Alice: Authentication Response
     @enduml   
   #+END_SRC
   
   也可以使用  *title* *end title* 关键字定义跨跃多行的标题。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070122.png :cmdline -charset UTF-8
     @startuml
     title
     <u>Simple </u> communication example
     on <i>several </i> lines and using <font color=red >html </font >
     This is hosted by <img:sourceforge.jpg >
     end title
     Alice -> Bob: Authentication Request
     Bob -> Alice: Authentication Response
     @enduml   
   #+END_SRC

** Participants encompass
   可以使用框框把参考者框起来
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070123.png :cmdline -charset UTF-8
     @startuml
     box "Internal Service" #LightBlue
     participant Bob
     participant Alice
     end box
     participant Other
     Bob -> Alice : hello
     Alice -> Other : hello
     @enduml   
   #+END_SRC

** Removing Footer
   可以使用 *hide footbox* 来删除图的footer。
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016070124.png :cmdline -charset UTF-8
     @startuml
     hide footbox
     title Footer removed
     Alice -> Bob: Authentication Request
     Bob --> Alice: Authentication Response
     @enduml   
   #+END_SRC

** Skinparam
   可以使用 *skinparm* 来改变绘制时，使用的字体和颜色。
   #+BEGIN_SRC plantuml ;exports both :file ./images/2016/2016070125.png :cmdline -charset UTF-8
     @startuml
     skinparam backgroundColor #EEEBDC
     skinparam sequence {
     ArrowColor DeepSkyBlue
     ActorBorderColor DeepSkyBlue
     LifeLineBorderColor blue
     LifeLineBackgroundColor #A9DCDF
     ParticipantBorderColor DeepSkyBlue
     ParticipantBackgroundColor DodgerBlue
     ParticipantFontName Impact
     ParticipantFontSize 17
     ParticipantFontColor #A9DCDF
     ActorBackgroundColor aqua
     ActorFontColor DeepSkyBlue
     ActorFontSize 17
     ActorFontName Aapex
     }
     actor User
     participant "First Class" as A
     participant "Second Class" as B
     participant "Last Class" as C
     User -> A: DoWork
     activate A
     A -> B: Create Request
     activate B
     B -> C: DoWork
     activate C
     C --> B: WorkDone
     destroy C
     B --> A: Request Created
     deactivate B
     A --> User: Done
     deactivate A
     @enduml
   #+END_SRC
* Use Case Diagram
** Usecases
    用例可以使用 '( )' 表示，或者使用关键字 *usecase* , 还可以使用
    *as* 关键字来定义一个别名。
    #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016071210.png :cmdline -charset UTF-8
      @startuml
      (First usecase)
      (Another usecase) as (UC2)
      usecase UC3
      usecase (Last\nusecase) as UC4
      @enduml
    #+END_SRC
** Actors
    活动者可以使用 ': :'表示，或者使用关键字 *actor* ，还可以使用 *as*
    关键字来定义一个别名。
    #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016071211.png :cmdline -charset UTF-8
      @startuml
      :First Actor:
      :Another\nactor: as Men2
      actor Men3
      actor :Last actor: as Men4
      @enduml
    #+END_SRC
** Usecases description
    可以使用如下一些分隔符来表示多行用例描述。 
    #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016071212.png.png :cmdline -charset UTF-8
      @startuml
      usecase UC1 as "You can use
      several lines to define your usecase.
      You can also use separators.
      --
      Several separators are possible.
      ==
      And you can add titles:
      ..Conclusion..
      This allows large description."
      @enduml
    #+END_SRC

    #+RESULTS:
    [[file:./images/2016/2016071212.png.png]]

** Basic Example
    #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016071213.png :cmdline -charset UTF-8
      @startuml
      User -> (Start)
      User --> (Use the application) : A small label
      :Main Admin: ---> (Use the application) : This is\nyet another\nlabel
      @enduml
    #+END_SRC

    #+RESULTS:
    [[file:./images/2016/2016071213.png]]

** Extension
    #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016071214.png :cmdline -charset UTF-8
      @startuml
      :Main Admin: as Admin
      (Use the application) as (Use)
      User <|-- Admin
      (Start) <|-- (Use)
      @enduml
    #+END_SRC

** Using notes
    #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016071215.png :cmdline -charset UTF-8
      @startuml
      :Main Admin: as Admin
      (Use the application) as (Use)
      User -> (Start)
      User --> (Use)
      Admin ---> (Use)
      note right of Admin : This is an example.
      note right of (Use)
      A note can also
      be on several lines
      end note
      note "This note is connected\nto several objects." as N2
      (Start) .. N2
      N2 .. (Use)
      @enduml
    #+END_SRC

** Stereotypes
    #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016071216.png :cmdline -charset UTF-8
      @startuml
      User << Human >>
      :Main Database: as MySql << Application >>
      (Start) << One Shot >>
      (Use the application) as (Use) << Main >>
      User -> (Start)
      User --> (Use)
      MySql --> (Use)
      @enduml
    #+END_SRC

** Changing arrows direction
    #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016071217.png :cmdline -charset UTF-8
      @startuml
      :user: --> (Use case 1)
      :user: -> (Use case 2)
      @enduml
    #+END_SRC

    You can also change directions by reversing the link:
    #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016071218.png :cmdline -charset UTF-8
      @startuml
      (Use case 1) <.. :user:
      (Use case 2) <- :user:
      @enduml
    #+END_SRC

    还可以在箭头中直接使用 *left* *right* *up* *down* 等关键字指定
    #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016071219.png :cmdline -charset UTF-8
      @startuml
      :user: -left -> (dummyLeft)
      :user: -right -> (dummyRight)
      :user: -up-> (dummyUp)
      :user: -down -> (dummyDown)
      @enduml
    #+END_SRC

    
** Title the diagram
    #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016071220.png :cmdline -charset UTF-8
      @startuml
      title Simple <b>Usecase </b>\nwith one actor
      "Use the application" as (Use)
      User -> (Use)
      @enduml
    #+END_SRC

** Splitting diagrams
    #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016071221.png :cmdline -charset UTF-8
      @startuml
      :actor1: --> (Usecase1)
      newpage
      :actor2: --> (Usecase2)
      @enduml
    #+END_SRC

** Left to right direction
    默认方向是从上到下。
    #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016071222.png :cmdline -charset UTF-8
      @startuml
      'default
      top to bottom direction
      user1 --> (Usecase 1)
      user2 --> (Usecase 2)
      @enduml
    #+END_SRC

    #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016071223.png :cmdline -charset UTF-8
      @startuml
      left to right direction
      user1 --> (Usecase 1)
      user2 --> (Usecase 2)
      @enduml
    #+END_SRC

** Skinparam
    改变颜色和显示的字体
    #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016071224.png :cmdline -charset UTF-8
      @startuml
      skinparam handwritten true
      skinparam usecase {
      BackgroundColor DarkSeaGreen
      BorderColor DarkSlateGray
      BackgroundColor << Main >> YellowGreen
      BorderColor << Main >> YellowGreen
      ArrowColor Olive
      ActorBorderColor black
      ActorFontName Courier
      ActorBackgroundColor << Human >> Gold
      }
      User << Human >>
      :Main Database: as MySql << Application >>
      (Start) << One Shot >>
      (Use the application) as (Use) << Main >>
      User -> (Start)
      User --> (Use)
      MySql --> (Use)
      @enduml
    #+END_SRC

** Complete example
    #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016071225.png :cmdline -charset UTF-8
      @startuml
      left to right direction
      skinparam packageStyle rect
      actor customer
      actor clerk
      rectangle checkout {
      customer -- (checkout)
      (checkout) .> (payment) : include
      (help) .> (checkout) : extends
      (checkout) -- clerk
      }
      @enduml
    #+END_SRC

* Class Diagram

* Activity Diagram

* Activity Diagram (beta)
  活动图的新语法

** Simple Activity

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061002.png :cmdline -charset UTF-8
     @startuml
     :Hello world;
     :This is on defined on
     several **lines**;
     @enduml   
   #+END_SRC

   #+RESULTS:
   [[file:./images/2016/2016061002.png]]

** Start/Stop
   定义活动图的开始和结束位置
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061003.png :cmdline -charset UTF-8
     @startuml
     start
     :Hello world;
     :This is on defined on
     several **lines**;
     stop
     @enduml   
   #+END_SRC

   也可以使用end关键字
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061004.png :cmdline -charset UTF-8
     @startuml
     start
     :Hello world;
     :This is on defined on
     several **lines**;
     end
     @enduml   
   #+END_SRC

** Conditional
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061005.png :cmdline -charset UTF-8
     @startuml
     start
     if (Graphviz installed?) then (yes)
     :process all\ndiagrams;
     else (no)
     :process only
     __sequence__ and __activity__ diagrams;
     endif
     stop
     @enduml           
   #+END_SRC

   elseif

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061006.png :cmdline -charset UTF-8
     @startuml
     start
     if (condition A) then (yes)
     :Text 1;
     elseif (condition B) then (yes)
     :Text 2;
     stop
     elseif (condition C) then (yes)
     :Text 3;
     elseif (condition D) then (yes)
     :Text 4;
     else (nothing)
     :Text else;
     endif
     stop
     @enduml
   #+END_SRC

** Repeat loop

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061007.png :cmdline -charset UTF-8
     @startuml
     start
     repeat
     :read data;
     :generate diagrams;
     repeat while (more data?)
     stop
     @enduml   
   #+END_SRC

** While loop

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061008.png :cmdline -charset UTF-8
     @startuml
     start
     while (data available?)
     :read data;
     :generate diagrams;
     endwhile
     stop
     @enduml
   #+END_SRC

   使用lable和is关键字
   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061009.png :cmdline -charset UTF-8
     @startuml
     while (check filesize ?) is (not empty)
     :read file;
     endwhile (empty)
     :close file;
     @enduml   
   #+END_SRC

** Parallel processing

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061010.png :cmdline -charset UTF-8
     @startuml
     start
     if (multiprocessor?) then (yes)
     fork
     :Treatment 1;
     fork again
     :Treatment 2;
     end fork
     else (monoproc)
     :Treatment 1;
     :Treatment 2;
     endif
     @enduml   
   #+END_SRC

** Notes

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061011.png :cmdline -charset UTF-8
     @startuml
     start
     :foo1;
     note left: This is a note
     :foo2;
     note right
     This note is on several
     //lines// and can
     contain <b>HTML </b>
     ====
     ,* Calling the method ""foo()"" is prohibited
     end note
     stop
     @enduml   
   #+END_SRC

** Title Legend

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061012.png :cmdline -charset UTF-8
     @startuml
     title this is my title
     if (condition?) then (yes)
     :yes;
     else (no)
     :no;
     note right
     this is a note
     end note
     endif
     stop
     legend
     this is the legend
     endlegend
     footer dummy footer
     header
     this is
     a long __dummy__ header
     end header
     @enduml
   #+END_SRC

** Colors

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061013.png :cmdline -charset UTF-8
     @startuml
     start
     :starting progress;
     #HotPink:reading configuration files
     These files should edited at this point!;
     #AAAAAA:ending of the process;
     @enduml   
   #+END_SRC

** Arrow

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061014.png :cmdline -charset UTF-8
     @startuml
     :foo1;
     -> You can put text on arrows;
     if (test) then
     -[#blue]->
     :foo2;
     -[#green]-> The text can
     also be on several lines
     and **very** long...;
     :foo3;
     else
     -[#black]->
     :foo4;
     endif
     -[#gray]->
     :foo5;
     @enduml
   #+END_SRC

** Grouping

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061015.png :cmdline -charset UTF-8
     @startuml
     start
     partition Initialization {
     :read config file;
     :init internal variable;
     }
     partition Running {
     :wait for user interaction;
     :print information;
     }
     stop
     @enduml   
   #+END_SRC

** Swimlanes

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061016.png :cmdline -charset UTF-8
     @startuml
     |Swimlane1|
     start
     :foo1;
     |#AntiqueWhite|Swimlane2|
     :foo2;
     :foo3;
     |Swimlane1|
     :foo4;
     |Swimlane2|
     :foo5;
     stop
     @enduml   
   #+END_SRC

** Detach

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061017.png :cmdline -charset UTF-8
     @startuml
     :start;
     fork
     :foo1;
     :foo2;
     fork again
     :foo3;
     detach
     endfork
     if (foo4) then
     :foo5;
     detach
     endif
     :foo6;
     detach
     :foo7;
     stop
     @enduml   
   #+END_SRC
** SDL 通过改变最后的;分隔符，可以设置不同的Activity渲染图形
   - |
   - <
   - >
   - /
   - ]
   - }

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061018.png :cmdline -charset UTF-8
     @startuml
     :Ready;
     :next(o)|
     :Receiving;
     split
     :nak(i)<
     :ack(o)>
     split again
     :ack(i)<
     :next(o)
     on several line|
     :i := i + 1]
     :ack(o)>
     split again
     :err(i)<
     :nak(o)>
     split again
     :foo/
     split again
     :i > 5}
     stop
     end split
     :finish;
     @enduml   
   #+END_SRC

** Complete example

   #+BEGIN_SRC plantuml :exports both :file ./images/2016/2016061019.png :cmdline -charset UTF-8
     @startuml
     start
     :ClickServlet.handleRequest ();
     :new page;
     if (Page.onSecurityCheck) then (true)
     :Page.onInit();
     if (isForward?) then (no)
     :Process controls;
     if (continue processing?) then (no)
     stop
     endif
     if (isPost?) then (yes)
     :Page.onPost();
     else (no)
     :Page.onGet();
     endif
     :Page.onRender ();
     endif
     else (false)
     endif
     if (do redirect?) then (yes)
     :redirect process;
     else
     if (do forward?) then (yes)
     :Forward request;
     else (no)
     :Render page template;
     endif
     endif
     stop
     @enduml   
   #+END_SRC
* Component Diagram


* State Diagram

* Object Diagram

* Common commands

* Salt

* Creole

* Changing fonts and colors

* Preprocessing

* Internationalization

* Color Names
