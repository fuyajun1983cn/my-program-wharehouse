#+STARTUP: overview
#+STARTUP: hidestars
#+TITLE: 设计模式快速参考
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+HTML_HEAD: <link rel="stylesheet" title="Standard" href="css/worg.css" type="text/css" />


* 构造模式

  http://www.java2s.com/Tutorials/Java/Java_Design_Patterns/index.htm
  主要描述如何更好地表述一个对象。主要有如下一些具体模式：

** 抽象工厂(Abstract Factory)

** 构造器(Builder)

** 工厂方法(Factory Method)
   defines an abstract class that creates objects but lets each
   subclass decide which object to create. 

   定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一
   个类的实例化延迟到其子类。

   #+BEGIN_SRC plantuml :file ./images/2016/2016051801.png :cmdline -charset UTF-8
     @startuml
     AbstractFactory <|.. ConcreteFactory
     AbstractProduct <|.. ConcreteProduct
     ConcreteFactory ..> ConcreteProduct
     @enduml
   #+END_SRC

   #+RESULTS:
   [[file:./images/2016/2016051801.png]]

** 原型(Prototype)

** 单例(Singleton)

* 结构模式
  主要描述组织对象和类以完成更大的目标。主要有如下一些具体模式：

** 适配器(Adapter)

** 桥接(Bridge)

** 组合(Composite)

** 修饰器(Decorator)

** 门面(Facade)

** 享元(Flyweight)

** 代理(Proxy)

* 行为模式
  主要关注对象之间的交互。主要有如下一些具体模式：

** 责任链(Chain of Responsibility)

** 命令(Command)

** 解释器(Interpreter)

** 迭代器(Iterator)

** 仲裁者(Mediator)

** 备忘录(Memento)

** 观察者(Observer)

** 状态(State)

** 策略(Strategy)

** 模板方法(Template Method) 

** 访问者(Visitor Method)

* 体系结构模式

** MVC(Model-View-Controller)

* 扩展

** Service Provider
    研究类ImageIO

** Reactor pattern
    Java Selector   no blocking I/O
** Proactor pattern
    Java Asynchronous I/O
