#+STARTUP: overview
#+STARTUP: hidestars
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+HTML_HEAD: <link rel="stylesheet" title="Standard" href="css/worg.css" type="text/css" />


* Architecture  

  [[./images/2016/2016011401.png]]

** 概述   
   Wi-Fi Simple Configuration 定义 了一些新的802.11 IE。 这些IE包含在
   Beacon，Probe Request和Probe Response帧中 。
   这些IE的目的主要是告知其他设备执行WSC操作的能力。

** Registration Protocol

   协议主要有如下一些目的：
   1. 解决基本的连接性问题。
   2. 提供Enrollee和Registar之间的相互标识信息，启用私密配置功能。
   3. 安全地将WLAN设置和其他的配置信息从Registar传递到Enrollee。
   4. 建立每个设置的角色（AP，Registar和Enrollee）
   5. 建立Extended Master Session Key EMSK，用于保护更多的应用相关的配
      置功能。

   协议工作于两个阶段：
   1. discovery phase
      交互Registar和Enrollee之间的描述性信息。
      目的主要是能发现周围的Registrar设备，能使自己能被Registar发现。
      STA enrollee会先发送一个M1消息请求关联到Registar。

   2. 第二阶段
      该阶段会到达Credential provisioning， 在M2，M2D，M8
      消息结束。
      M2D： Registar不能认证Enrollee。  
      M2： 只针对NFC等out of band传输的情况。
      M8: 在M8中，会携带WLAN Credentials给Enrollee。

*** Timeout处理  

    Recommended timeout values are: retransmission timeout = 5
    seconds, individual message processing timeout = 15 seconds,
    overall timeout for the entire protocol to complete = 2 minutes.  

** 消息

*** 管理帧
    
**** 管理格式
     WSC Device Discovery是通过使用包含在Beacon，Probe Request和Probe
     Response中的IE信息来完成的。WSC的IE信息格式遵循IEEE 802.11的格式，
     如下图所示 ：
     [[./images/2016/2016031401.png]]

     
**** 要点提要
     1. AP必须在Beacon和Probe Response帧中提供WSC IE信息，STA则必须在
        Probe Request帧中提供WSC IE信息，以表明其支持WSC。

     2. STA要想使用EAP-WSC方法与AP进行连接，必须在(re)association
        request中包含一个WSC IE信息。

     3. 在WSC关联过程中， Capability IE中的Privacy域，RSN IE和WPA IE都
        不相关，STA和AP都应该忽略。

     4. 如果(re)association request中包含WSC IE，AP必须与STA执行
        EAP-WSC过程，而不能使用其他的安全握手协议。

     5. 成功关联后，STA会发送一个EAPOL-Start数据包给AP，并等待AP回复
        EAP-Request/Identity。 如果(re)association request中包含一个
        WSC IE信息，并且WSC IE的版本在2.0以后，则AP也可以在收到
        EAPOL-Start之前直接向AP发送EAP-Request/Identiry。 当STA收到此
        包后，它会响应一个EAP-Response-Identity来表明它将成功Enrollee
        或Registar。

     6. 为了与1.0之前的版本兼容，启用WPA2-Personal网络，且支持WSC的AP
        也要允许与这样的STA进行EAP-WSC关联交互：
        - 在Associate Request帧中不包含RSN IE或WPA IE，同时也不包含WSC
          IE。

        - 与这种STA进行EAP-WSC交互时，AP必须等待STA发送EAPOL-Start交互
          帧,才允许进行之后的WAP-WSC交互过程。


* In-band Setup Using a Standalone AP/Registrar

  [[./images/2016/2016011402.png]]

** Setup Steps

   1. The Enrollee sends its Discovery data in a probe request to a
      Wi-Fi Simple Configuration AP. The AP or wireless Registrar
      responds with its own Discovery data in the probe response.
   2. The user is prompted to enter the Enrollee’s device password
      into the AP/Registrar using a keypad interface or an out-of-band
      channel.
   3. The Enrollee connects and initiates 802.1X using the identity
      “WFASimpleConfig-Enrollee-1-0”.
   4. The Enrollee and Registrar exchange messages M1-M8 to provision
      the Enrollee.
   5. The Enrollee disassociates and reconnects, using its new WLAN
      authentication Credential.

** P2P EAP WSC交互过程

   - EAPOL-Start
     EAPOL: SUPP_PAE entering state CONNECTING 
     EAPOL: txStart
   - EAPOL-Packet (EAPOL-Reqeust/Identity)(接收) 
     RX EAPOL   
     EAPOL: SUPP_PAE entering state RESTART
     EAP: EAP entering state INITIALIZE
     EAP: EAP entering state IDLE
     EAPOL: SUPP_PAE entering state AUTHENTICATING
     EAPOL: SUPP_BE entering state REQUEST
     EAP: EAP entering state RECEIVED
     EAP: Received EAP-Request id=75 method=1 vendor=0 vendorMethod=0
     EAP: EAP entering state IDENTITY
   - EAPOL-Packet (EAPOL-Response/Identity)(发送)
     EAP: EAP entering state SEND_RESPONSE
     EAP: EAP entering state IDLE
     EAPOL: SUPP_BE entering state RESPONSE
     TX EAPOL
     EAPOL: SUPP_BE entering state RECEIVE
   - EAPOL-Packet (EAPOL-Request/Start)（接收）
     EAPOL: Received EAP-Packet frame
     EAPOL: SUPP_BE entering state REQUEST
     EAP: EAP entering state RECEIVED
     EAP: Received EAP-Request id=76 method=254 vendor=14122
     vendorMethod=1(建议一个方法)
     EAP: EAP entering state GET_METHOD
     EAP: Initialize selected EAP method: vendor 14122 method 1 (WSC)
     EAP-WSC: Fragment size limit 1398
     EAP: EAP entering state METHOD
     EAP-WSC: Received packet: Op-Code 1 Flags 0x0 Message Length 0
     EAP-WSC: Received start
     EAP-WSC: WAIT_START -> MESG
     EAP-WSC: MESG -> MESG
     EAP-WSC: Generating Response
     EAP-WSC: Sending out 406 bytes (message sent completely)
     EAP-WSC: MESG -> MESG
     EAP: method process -> ignore=FALSE methodState=MAY_CONT
     decision=FAIL
     EAP: EAP entering state SEND_RESPONSE
     EAP: EAP entering state IDLE
     EAPOL: SUPP_BE entering state RESPONSE
      EAPOL: SUPP_BE entering state RECEIVE  (M1已经发送出去)
   - EAPOL Packet (EAPOL-Request/M2)
     EAPOL: Received EAP-Packet frame
     EAPOL: SUPP_BE entering state REQUEST
     EAP: EAP entering state RECEIVED
     EAP: Received EAP-Request id=77 method=254 vendor=14122
     vendorMethod=1
     EAP: EAP entering state METHOD
     EAP-WSC: Received packet: Op-Code 4 Flags 0x0 Message Length 0
     WPS: Received WSC_MSG(解析WSC-MSG)
     

wpas_wps_eapol_cb  //checking whether fast association is possible
wps完成后，会调用该函数。设置wpa_s->reassociate=1。 


p2p_go_configured --> wpa_supplicant_ap_wps_pbc

入口 函数之一：
sme_send_authentication

wpa_supplicant_deauthenticate --> wpa_supplicant_event(...,
EVENT_DEAUTH, ...) --> wpas_event_deauth --> wpas_event_disconnect  -->
wpa_supplicant_event_disassoc -- > wpa_supplicant_event_disassoc_finish


wps->p2p_dev_addr
                           p2p_get_go_dev_addr
eap_init -->　eap_wsc_init　-------------------> wps_init --> 


struct wps_registrar *reg = wpa_s->ap_iface->bss[0]->wps->registrar;

reg->p2p_dev_addr

wps_registrar_button_pushed  (wps_registrar.c)

if (p2p_dev_addr)
   os_memcpy(reg->p2p_dev_addr, p2p_dev_addr, ETH_ALEN);
else
   os_memset(reg->p2p_dev_addr, 0, ETH_ALEN);




