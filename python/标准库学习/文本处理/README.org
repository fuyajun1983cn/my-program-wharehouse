#+TITLE: 文本处理

* 常见的字符串操作 str
  __str__ : 执行print的时候调用。

  __repr__ : 直接打印的时候调用 

  接口：
  - find()
  - search()
  - index()
  - startswith() endswith()
  - lstrip(), rstrip(), strip()
    #+BEGIN_SRC python
      xml_tag = "<some tag>"
      xml_tag.lstrip("<")
    #+END_SRC
  - upper() / lower()
  - split() / splitlines()

    splitlines()用于分割跨行的文本，按行进行分割。

  - join()


  Unicode字符串： 在python3中，字符串默认是unicode格式的，而在python2
  中，字符串默认是assic格式的，表示unicode字符串时，在加前缀： u

* 正则表达式  
** 转义字符

| Code | Meaning                        |
|------+--------------------------------|
| \d   | 数字                           |
| \D   | 非数字                         |
| \s   | 空格（tab,space,newline,etc.） |
| \S   | 非空格                         |
| \w   | 字母和数字                     |
| \W   | 非字母和数字                   |

** Anchoring Codes

| Code | Meaning                          |
|------+----------------------------------|
| ^    | 字符串或行的开始                 |
| $    | 字符串或行的末尾                 |
| \A   | 字符串的开始                     |
| \Z   | 字符串的末尾                     |
| \b   | 一个单词开头或末尾的空字符串     |
| \B   | 不在一个单词开头或末尾的空字符串 |

** 通过组来分解匹配  
   使用Match对象的groups()方法，可以访问单个匹配的子串。
   group 0代表整个字符串，而子组则是从数字1开始。  
   Pyton扩展了基本的分组语法，增加了*命名组*。使用名字来引用组。  

   语法形式如下：
   `?P<name>pattern`

   创建一个非捕获的组：
   `?:pattern`

** 搜索选项  
   IGNORECASE: 在匹配时，不区分字母大小写  
   MULTILINE：使用该选项时，^,$也表示每行的行首和行尾。  
   DOTALL：通常情况下，.字符只匹配换行符之外的字符，开启该选项后，也会匹配换行符。  
   UNICODE:在Python2下，字符串默认是ASCII字符，使用此选项后，将可以匹配非ASCII字符。在Python3中，由于默认是UNICODE，此选项不需要。  

** 在模式中嵌入标记  
   当编译一个表达式时，如果无法加入标记，则可以将标记加入到字符串本身。
   打开大小写不敏感标记：`(?!)\bT\w+`, 其他的一些标记如下：  
   | flag       | Abbreviation |
   |------------+--------------|
   | IGNORECASE | i            |
   | MULTILINE  | m            |
   | DOTALL     | s            |
   | UNICODE    | u            |
   | VERBOSE    | x            |

   上述标记可以组合，如(?imu)

** Looking Ahead or Behind
   有时候，只有其他部分匹配后另一个匹配才合法，可以使用如下语法形式：
   Positive Look Ahead: `(?=pattern)`
   Negative Look Ahead: `(?!pattern)`
   Positive Look Behind: `(?<=pattern)`
   Negative Look Behind: `(?<!pattern)`

** 自引用表达式
   引用匹配的组，可以引用\num的形式
   或者使用`(?P=name)`引用之前的一个命名组的值

** 修改模式匹配的字符串  
   使用sub()用另一个字符串替换所有匹配模式的地方。  

** 分解模式  
  str.split()是一个经常使用的函数，用于分割一个字符串，但是仅支持普通的字符作为分割符，
  当普通分割符难以有效分割字符串时，需要使用正则表达式来作为分割符。可以使用re.split(pattern,
  text)

* 文件操作
  
** 创建文件 
   #+BEGIN_SRC python
     try:
         file=open("test.txt", "w")
         ...
     finally:
         file.close()


     with open("test.txt", "w") as f:
         ...
   #+END_SRC
** 读取文件
   主要有如下几个接口：
   - read()
   - readline()
     读取一行文本，可以传递一个参数来指定一行中读取多少个字符。
   - readlines()
     读取多行文本，可以传递一个参数来指定读取多少个字符。

** 写入文件 
   主要有如下几个接口：
   - write()
   - writelines()

* 标准输入和输出
  sys.stdin, sys.stdout.

* StringIO
  像处理文件对象一样处理字符串
  #+BEGIN_SRC python
    from StringIO import StringIO
    file_like_string="this is a\n mulline string"
    file_like_string.readline()
  #+END_SRC

* 网络文件访问 urllib / urllib2

* xml文件解析

** Element Tree
   #+BEGIN_SRC python
     from xml.etree import ElementTree as ET
     e = ET.parse('system_profile.xml')
   #+END_SRC

** minidom
   #+BEGIN_SRC python
     from xml.dom import minidom as dom
     dom.parse(...)

     dom.getElementsByTagName(...)

   #+END_SRC
   
* difflib的使用
对比字符串或列表之间的差异

* textwrap
textwrap模块用于格式式文本输出， 主要提供了如下几个接口：
** fill()
   格式化输出文本
   可以通过initial_indent和subsequent参数来调整首行和其他行的缩进量
** dedent()
  删除存在的缩进
